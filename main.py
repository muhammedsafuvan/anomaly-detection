import numpy as np
import matplotlib.pyplot as plt
from collections import deque
from IPython.display import display, clear_output
import rrcf  
import random
import time

class AnomalyDetection:

    '''
        A class for real-time anomaly detection in data streams using Robust Random Cut Forest (RRCF).

        This class simulates a continuous data stream with seasonal, trend, and noise components,
        along with random anomalies. It maintains a rolling window of data points and utilizes 
        an ensemble of RRCF trees to compute anomaly scores in real-time. Anomalies are identified 
        based on a contamination threshold that specifies the expected proportion of anomalies in 
        the data.

        Attributes:
            window_size (int): The size of the rolling window used for model training.
            contamination (float): The proportion of expected anomalies in the data stream.
            data_window (deque): A deque to store the most recent data points up to window_size.
            data_stream_gen (generator): A generator that produces simulated data points.
            forest (list): A list of RRCF trees used for anomaly detection.
            anomaly_scores (deque): A deque to store computed anomaly scores in a rolling window.
            data (list): A list to store all generated data points for visualization.
            anomaly_indices (list): A list to store indices of detected anomalies.

        Methods:
            data_stream(): 
                A generator that produces simulated data points with seasonal, trend, noise,
                and occasional anomalies.

            real_time_plot():
                Visualizes the data stream in real-time, updating the plot as new data points
                are generated and anomalies are detected.
    '''
    

    def __init__(self, window_size, contamination):
        self.window_size = window_size
        self.contamination = contamination
        self.data_window = deque(maxlen=self.window_size)
        self.data_stream_gen = self.data_stream()
        self.forest = [rrcf.RCTree() for _ in range(50)]  # Initialize a forest of 50 trees
        self.anomaly_scores = deque(maxlen=self.window_size)  # Track scores in a rolling window
        self.data = []
        self.anomaly_indices = []

    def data_stream(self):
        """
        Generates a data stream with seasonal, trend, noise components,
        and random anomalies.
        """
        t = 0
        while True:
            seasonality = 10 * np.sin(2 * np.pi * t / 50)  # Seasonal component
            trend = t * 0.1  # Trend component
            noise = random.normalvariate(0, 2)  # Noise component

            # 50% chance of introducing an anomaly with large spike or drop
            anomaly = random.choice([-100, 100]) if random.random() < 0.5 else 0
            yield trend + seasonality + noise + anomaly
            
            t += 1
            time.sleep(0.1)  # Adjust for simulation speed

    def real_time_plot(self):
        """
        Visualizes the data stream and detects anomalies in real-time using RRCF.
        """

        plt.figure(figsize=(10, 6))  # Set up figure for live plotting

        # Iterate over data points generated by the data stream
        for i, new_data in enumerate(self.data_stream_gen):
            self.data_window.append(new_data)  # Add new data point to rolling window

            # Update RRCF forest with the new data point
            for tree in self.forest:
                if len(self.data_window) == self.window_size:
                    tree.forget_point(i - self.window_size)  # Remove oldest data point
                tree.insert_point(new_data, index=i)  # Insert new data point

            # Compute anomaly score as average score across all trees
            score = np.mean([tree.codisp(i) for tree in self.forest if i in tree.leaves])
            self.anomaly_scores.append(score)  # Store score in rolling window

            # Check if the score exceeds the anomaly threshold
            if score > np.percentile(self.anomaly_scores, 100 - (self.contamination * 100)):
                self.anomaly_indices.append(len(self.data))  # Mark as anomaly

            # Update data for plotting
            self.data.append(new_data)

            # Clear previous output and update the plot with new data
            clear_output(wait=True)
            plt.clf()  # Clear previous plot

            plt.plot(self.data, 'b-', label='Data Stream')  # Plot data stream

            # Plot anomalies as red points on the data stream
            plt.scatter(self.anomaly_indices, [self.data[index] for index in self.anomaly_indices if index < len(self.data)], color='red', label='Anomalies')
            
    

            # Configure plot view window and labels
            plt.xlim(max(0, len(self.data) - self.window_size), len(self.data))  # Show recent data points
            plt.ylim(-130, 130)  # Adjust y-axis limits for anomaly visualization
            plt.legend()
            plt.title("Real-Time Data Stream with Increased Anomalies (RRCF)")
            plt.xlabel("Time Step")
            plt.ylabel("Data Value")
            
            display(plt.gcf())  # Display updated plot

# Run the anomaly detection and real-time plot
if __name__ == "__main__":
    window_size = 100  # Size of rolling window for model training
    contamination = 0.3  # Proportion of anomalies expected (not directly used in RRCF)
    detection = AnomalyDetection(window_size, contamination)  # Initialize the AnomalyDetection class
    detection.real_time_plot()  # Run the real-time plotting function
